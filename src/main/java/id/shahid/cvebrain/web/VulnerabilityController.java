/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package id.shahid.cvebrain.web;

import id.shahid.cvebrain.model.Vets;
import id.shahid.cvebrain.model.Vulnerabilities;
import id.shahid.cvebrain.service.ClinicService;
import id.shahid.cvebrain.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Map;

/**
 * @author Juergen Hoeller
 * @author Mark Fisher
 * @author Ken Krebs
 * @author Arjen Poutsma
 */
@Controller
public class VulnerabilityController {

    private final VulnerabilityService vulnerabilityService;


    @Autowired
    public VulnerabilityController(VulnerabilityService vulnerabilityService) {
        this.vulnerabilityService = vulnerabilityService;
    }

    @RequestMapping(value = {"/vulnerabilities.html"})
    public String showVulnerabilityList(Map<String, Object> model) {
        // Here we are returning an object of type 'Vets' rather than a collection of Vet objects
        // so it is simpler for Object-Xml mapping
        Vulnerabilities vulnerabilities = new Vulnerabilities();
        vulnerabilities.getVulnerabilityList().addAll(this.vulnerabilityService.findAllVulnerabilities());
        model.put("vulnerabilities", vulnerabilities);
        return "vulnerabilities/vulnerabilities";
    }

//    @RequestMapping("/vets.json")
//    public
//    @ResponseBody
//    Vulnerabilities showResourcesVetList() {
//        // Here we are returning an object of type 'Vets' rather than a collection of Vet objects
//        // so it is simpler for JSon/Object mapping
//        Vulnerabilities vulnerabilities = new Vulnerabilities();
//        vulnerabilities.getVulnerabilityList().addAll(this.vulnerabilityService.findAllVulnerabilities());
//        return vulnerabilities;
//    }


}
